{"version":3,"sources":["Components/Cards.js","Components/CardsArray.js","Components/Searchbox.js","Components/Scroll.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["Cards","className","alt","src","this","props","id","name","email","react","Component","Card_list","Robots","cardArray","map","user","i","SearchBox","searchField","SearchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","Searchbox","CardsArray","React","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAceA,E,uKAVP,OACI,sBAAKC,UAAW,+CAAhB,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA2BC,KAAKC,MAAMC,GAAtC,cACrB,6BAAKF,KAAKC,MAAMC,KAChB,4BAAIF,KAAKC,MAAME,OACf,4BAAIH,KAAKC,MAAMG,e,GAPXC,IAAMC,WCYXC,EAVG,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACVC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAChC,OAAO,cAAC,EAAD,CAAeV,GAAIM,EAAOI,GAAGV,GAAIC,KAAMK,EAAOI,GAAGT,KAAMC,MAAOI,EAAOI,GAAGR,OAA5DQ,MAEvB,OACI,8BACKH,KCGEI,EAXG,SAAC,GAA8B,EAA7BC,YAA8B,IAAlBC,EAAiB,EAAjBA,aAC5B,OACI,qBAAKlB,UAAW,MAAhB,SACI,uBAAOA,UAAY,kDACfmB,KAAO,SACPC,YAAY,kBACZC,SAAYH,OCEbI,G,MARA,SAAClB,GACZ,OACI,qBAAKmB,MAAO,CAACC,UAAY,SAAUC,OAAS,iBAAkBC,OAAS,SAAvE,SACKtB,EAAMuB,aCsCJC,E,kDApCX,aAAe,IAAD,8BACV,gBAYJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACd,YAAca,EAAME,OAAOC,SAZ1C,EAAKC,MAAQ,CACTvB,OAAS,GACTM,YAAc,IAJR,E,gEAQO,IAAD,OAChBkB,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAC3EF,MAAK,SAAAG,GAAK,OAAE,EAAKR,SAAS,CAACpB,OAAS4B,S,+BAOhC,IAAD,OACEC,EAAiBrC,KAAK+B,MAAMvB,OAAO8B,QAAO,SAAA9B,GAC5C,OAAOA,EAAOL,KAAKoC,cAAcC,SAAS,EAAKT,MAAMjB,YAAYyB,kBAErE,OAAgC,IAA7BvC,KAAK+B,MAAMvB,OAAOiC,OACV,4CAGH,sBAAK5C,UAAY,KAAjB,UACI,oBAAIA,UAAU,cAAd,0BACA,cAAC6C,EAAD,CAAW3B,aAAcf,KAAK0B,iBAC9B,cAAC,EAAD,UACA,cAACiB,EAAD,CAAYnC,OAAQ6B,a,GA9BtBO,IAAMtC,WCMTuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACL,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAELC,SAASC,eAAe,SAMzBZ,M","file":"static/js/main.9635058c.chunk.js","sourcesContent":["import react from 'react';\r\n\r\nclass Cards extends react.Component{\r\n    render () {\r\n        return(\r\n            <div className= 'tc bg-grey dib br3 pd3 ma2 grow bw2 shadow-5'>\r\n                <img alt='robots' src= {`https://robohash.org/${this.props.id}?200x200`} />\r\n                <h1>{this.props.id}</h1>\r\n                <p>{this.props.name}</p>\r\n                <p>{this.props.email}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Cards;","import React from 'react';\r\n\r\nimport Cards from './Cards';\r\n\r\nconst Card_list = ({Robots}) => {\r\n    const cardArray = Robots.map((user, i) => {\r\n        return <Cards key={i} id={Robots[i].id} name={Robots[i].name} email={Robots[i].email}/>\r\n    })\r\n    return (\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n    );\r\n}\r\nexport default Card_list;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField,SearchChange}) =>{\r\n    return(\r\n        <div className= 'pa2'>\r\n            <input className = 'pa3 ba b--light-gray bg-light-gray br4 shadow-1'\r\n                type = 'Search' \r\n                placeholder='Search For Robo'\r\n                onChange = {SearchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props)=> {\r\n    return(\r\n        <div style={{overflowY : 'Scroll', border : '5px solid gray', height : '800px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport CardsArray from '../Components/CardsArray';\r\n// import {Robots} from './Robots';\r\nimport Searchbox from '../Components/Searchbox';\r\nimport './App.css'\r\nimport Scroll from '../Components/Scroll';\r\nclass App extends React.Component{\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            Robots : [],\r\n            searchField : ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json())\r\n        .then(users=>this.setState({Robots : users}));\r\n    }\r\n    \r\n    onSearchChange = (event)=>{\r\n        this.setState({searchField : event.target.value})\r\n    }\r\n    \r\n    render(){\r\n        const filteredRobots = this.state.Robots.filter(Robots => {\r\n            return Robots.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n        })\r\n        if(this.state.Robots.length === 0){\r\n            return <h1>Loading...</h1>\r\n        }else {\r\n            return (\r\n                <div className = 'tc'>\r\n                    <h1 className='f1 1h-title'>Robo Friends</h1>\r\n                    <Searchbox SearchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                    <CardsArray Robots={filteredRobots}/>\r\n                    </Scroll>\r\n                </div>\r\n                );\r\n            }\r\n    }\r\n}\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(\n    <React.StrictMode>\n      <App/>\n    </React.StrictMode>\n,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}